When would you want to use a remote repository rather than keeping all your work local?

To be able to share the repository with other people (or perhaps machines) including possibly letting others commit changes.

------------------------------------------------------------------------

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You might not be ready to either merge other changes into your local repository or simply receive updates at the time.

------------------------------------------------------------------------

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork "clones" a repository from one GitHub account to another.  Use to, for example, take someone elses work and modify it on your own repository.
Clone makes a copy of a repository either locally or on GitHub.  Unlike fork, does not create a link to source of the clone.
Branch is used on a particular repository to create a different "branch" to work on simultaneously from other branches for things like new features, experimentation, etc.

------------------------------------------------------------------------

What is the benefit of having a copy of the last known state of the remote stored locally?

This allows you to work off-line on the remote changes.

------------------------------------------------------------------------

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

email, other vcs, something such as slack.  email and other collab methods dont' have such a learning curve but also don't have change logs and merging features a vcs does.

------------------------------------------------------------------------

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Working on the master is less involved than using a separate branch but a separate branch allows you to collaborate and ensure changes are correct before committing to the master.
